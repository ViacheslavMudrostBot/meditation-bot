# main.py  (Railway-ready, no Flask, no UptimeRobot)
import os
from datetime import time as dt_time
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    raise RuntimeError("‚ùå –£–∫–∞–∂–∏—Ç–µ BOT_TOKEN –≤ Railway ‚Üí Variables")

# ---------- /start ----------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if not user:
        return
    kb = [[InlineKeyboardButton("üßò‚Äç‚ôÇÔ∏è –ú–µ–¥–∏—Ç–∞—Ü–∏—è", callback_data="meditation")]]
    await update.message.reply_text(
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –º–µ–¥–∏—Ç–∞—Ü–∏—é:",
        reply_markup=InlineKeyboardMarkup(kb))

# ---------- callback ----------
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    from_user = query.from_user
    if not from_user:
        return
    try:
        with open("my_meditation.mp3", "rb") as f:
            await context.bot.send_voice(
                chat_id=from_user.id,
                voice=f,
                caption="üéß –ü—Ä–∏—è—Ç–Ω–æ–π –º–µ–¥–∏—Ç–∞—Ü–∏–∏!")
    except FileNotFoundError:
        await context.bot.send_message(
            chat_id=from_user.id,
            text="üéôÔ∏è –ê—É–¥–∏–æ—Ñ–∞–π–ª –º–µ–¥–∏—Ç–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")

# ---------- main ----------
def main():
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))
    print("ü§ñ Bot polling...")
    app.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
    main()
